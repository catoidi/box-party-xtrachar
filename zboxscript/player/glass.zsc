//zboxscript/player/glass.zsc

CLASS GlassProtection : PowerupGiver
{
	Default
	{
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.PERSISTENTPOWER;
		Inventory.MaxAmount 0;
		Powerup.Type "PowerIronFeet";
		Powerup.Mode "Full";
		Powerup.Duration 0x7FFFFFFF; //if you wait 2 whole years in real time, this powerup will expire.
		Powerup.Color "None";
	}
}

CLASS GlassDasher : Inventory {Default {Inventory.MaxAmount 1;}}

CLASS BoxPower : Ammo
{
	//mixin BoxLootBase;
	
	Default
	{
		Height 24;
		Radius 20;
		Inventory.Amount 0;
		Inventory.MaxAmount 40;
		Inventory.RestrictedTo "PlayerGlass";
		Inventory.InterHubAmount 0;
		+INVENTORY.UNCLEARABLE;
	}
	
	override void BeginPlay (void)
	{
		Super.BeginPlay();
		//SpriteName = "POWR";
		//ParticleColor = "bf bf bf";
	}
	
	States
	{
		Dummy:
			POWR A 0; //this is needed or "GetSpriteIndex" will mess up.
			Stop; //this state is never called by the health actor.
	}
}

CLASS PlayerGlass : BoxPlayerBase
{
	Default
	{
		Health 1;
		Speed 0.88;
		Player.MaxHealth 1;
		Player.StartItem "PlayerGlassToken";
		Player.StartItem "GlassProtection";
		Player.StartItem "BoxFakeArmor";
		Player.DisplayName "Glass";
		Player.Face "GAC";
		Player.Portrait "INFO_GLA";
		Alpha 0.75;
		RenderStyle "Translucent";
		+NORADIUSDMG;
		+NOPAIN;
	}
	
	double PowerTimer;
	int IFrames;
	
	action void CountLooterNum (void)
	{
		invoker.LooterNum = 0;
	}
	
	override void Tick(void)
	{
		CountLooterNum();
		
		Super.Tick();
		
		if (self)
		{
			if (self.CountInv("BoxPower") < 40) 
			{
				if (PowerTimer >= 7.0)
				{
					A_GiveInventory("BoxPower", 1);
					PowerTimer += -7.0;
				}
				if (self.Health > 0) {PowerTimer += 1.0;}
			}
			if (self.CountInv("GlassDasher") >= 1)
			{
				GlassDash();
			}
			if (IFrames > 0)
			{
				bINVULNERABLE = true;
				IFrames += -1;
			}
			else {bINVULNERABLE = false;}
		}
	}
	
	action void GlassDash(void)
	{
		if (self)
		{
			A_TakeInventory("GlassDasher", 1);
			if (self.Health > 0)
			{
				invoker.IFrames = 18;
				A_Recoil(-40);
				A_SpawnItemEX("BoxSlamWall", 32, 0, 28, 16, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_Explode(16, 64, damagetype: "Melee");
			}
		}
	}
	
	States
	{
		Spawn:
			GBOX A 0 NoDelay A_BoxHatTime(true);
			GBOX A -1;
			Loop;
		See:
			GBOX AB 7;
			Loop;
		Missile:
			"####" "#" 1;
			"####" "#"  0 A_JumpIfInventory("GlowstickIsFiring", 1, "Melee");
			GBOX D 4 BRIGHT;
			GBOX E 8;
			Goto Spawn;
		Melee:
			GBOX C 12;
			Goto Spawn;
		Pain:
			GBOX L 4 A_Pain;
			GBOX L 4;
			Goto Spawn;
		Death:
		XDeath:
			GBOX F 0 A_BoxHatTime(false);
			GBOX F 4 A_PlayerScream;
			GBOX G 4;
			TNT1 AAAAAAAAAA 0 A_SpawnItemEx("GlassGib", random(-6, 6), random(-6, 6), random(26, 38), random(-12, 12), random(-12, 12), random(0, 12), random(0, 359), SXF_NOCHECKPOSITION | SXF_TRANSFERTRANSLATION);
			TNT1 A -1 A_NoBlocking;
			Stop;
	}
}

CLASS GlassGib : BoxGib
{	
	Default
	{
		Alpha 0.75;
		RenderStyle "Translucent";
	}

	States
	{
        Spawn:
			TNT1 A 0 NoDelay A_SetRoll(random(0, 359));
			"####" "#" 0 A_QueueCorpse;
			GBOX H 0 A_Jump(128, 2);
			GBOX H 0 {bSPRITEFLIP = true;}
			"####" "#" 1 A_Jump(128, "SpeenLeft");
			Goto SpeenRight;
	}
}